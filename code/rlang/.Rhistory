col.labels = design_col,cex = 6,alpha.points = 0.15, alpha.labels = 0.15,text.cex = 8)
labels4CA <- createxyLabels(resCA = resCA.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points +
symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
#print(map.IJ.sym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
map.IJ.sym <- symMap$baseMap + symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
color4I <- brewer.pal(n = 5, name='Set1')
color4I <- colorRampPalette(color4I)(nrow(ci.a))
# baseMaps ----
ctr.I <- ci.a * sign(Fi[,1])
PTCA4CATA::PrettyBarPlot2(ctr.I[,1],
threshold = 1 / NROW(ctr.I),
font.size = 4,
color4bar = gplots::col2hex(color4I),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.I),
1.2*max(ctr.I) ),
horizontal = FALSE )
# Get some colors ----
#color4Authors <-prettyGraphsColorSelection(n.colors = nrow(ci.a))
color4J <- brewer.pal(n = 5, name='Set1')
color4J <- colorRampPalette(color4J)(nrow(cj.a))
# baseMaps ----
ctr.J <- cj.a * sign(Fj[,1])
PTCA4CATA::PrettyBarPlot2(ctr.J[,1],
threshold = 1 / NROW(ctr.J),
font.size = 4,
color4bar = gplots::col2hex(color4J),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.J),
1.2*max(ctr.J) ),
horizontal = FALSE )
tweets_inf <- epCA.inference.battery(t(tweets), DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf$Inference.Data$ fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 3, name='Set1')
col4J = colorRampPalette(col4J)(nrow(tweets))
laDim = 1
ba001.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios',
ylim = c(60*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(ba001.BR1)
tweets_inf_t <- epCA.inference.battery(tweets, DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf_t$Inference.Data$fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 10, name='Set3')
col4J = colorRampPalette(col4J)(ncol(tweets))
laDim = 1
wedata.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios'
#ylim = c(1.2*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(wedata.BR1)
knitr::opts_chunk$set(fig.width=10, fig.height=6,
echo=TRUE, warning=FALSE, message=FALSE)
library(ExPosition)
library(InPosition)
# use the last version of PTCA
devtools::install_github('HerveAbdi/PTCA4CATA')
library(PTCA4CATA)
library(corrplot)
library(ggplot2)
devtools::install_github('HerveAbdi/data4PCCAR')
library(data4PCCAR)
library(corrplot)
library(RColorBrewer)
library("gplots")
library(tidyverse)
col_groups = c('word','13','14','17')
tweets_eth <- readRDS('../../data/tidy_tweets_per_week_log_eth_10.rds')[, col_groups]
tweets_facebook <- readRDS('../../data/tidy_tweets_per_week_log_facebook_10.rds')[,col_groups]
tweets_bitcoin <- readRDS('../../data/tidy_tweets_per_week_log_bitcoin_10.rds')[,col_groups]
tweets_eth <- as.data.frame(tweets_eth) %>% column_to_rownames(var = 'word')
tweets_facebook <- as.data.frame(tweets_facebook) %>% column_to_rownames(var = 'word')
tweets_bitcoin <- as.data.frame(tweets_bitcoin) %>% column_to_rownames(var = 'word')
tweets_eth <- tweets_eth[apply(tweets_eth, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
tweets_facebook <- tweets_facebook[apply(tweets_facebook, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
tweets_bitcoin <- tweets_bitcoin[apply(tweets_bitcoin, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
rownames(tweets_eth) <- paste0(rownames(tweets_eth),'_e')
rownames(tweets_facebook) <- paste0(rownames(tweets_facebook),'_f')
rownames(tweets_bitcoin) <- paste0(rownames(tweets_bitcoin),'_b')
tweets <- rbind(tweets_eth,tweets_facebook, tweets_bitcoin)
tweets
design_eth <- rep('D_Ethurium', nrow(tweets_eth))
design_facebook <- rep('D_Facebook', nrow(tweets_facebook))
design_bitcoin <- rep('D_Bitcoin', nrow(tweets_bitcoin))
design <- c(design_eth, design_facebook, design_bitcoin)
heatmap.2(as.matrix(tweets), col = rev(heat.colors(nrow(tweets_eth))), Rowv = NULL, Colv = NULL, dendrogram = 'none',trace = 'none',margins = c(8, 16)) #brewer.pal(n = 5, name='Set1'))
resCA.sym  <- epCA(tweets, DESIGN = design, make_design_nominal = TRUE, symmetric = TRUE, graphs = FALSE)
# to run a plain CA but asymetric
resCA.asym <- epCA(tweets, DESIGN = design, make_design_nominal = TRUE, symmetric = FALSE, graphs = FALSE)
PTCA4CATA::PlotScree(ev = resCA.sym$ExPosition.Data$eigs,
#p.ev =  we_data_inf$Inference.Data$components$p.vals,
title = 'SCREE Plot',
plotKaiser = TRUE
)
Fj.a <- resCA.asym$ExPosition.Data$fj
cj.a <- resCA.asym$ExPosition.Data$cj
ci.a <- resCA.asym$ExPosition.Data$ci
Fi   <- resCA.sym$ExPosition.Data$fi
Fj   <- resCA.sym$ExPosition.Data$fj
constraints.sym <- minmaxHelper(mat1 = Fi, mat2  = Fj)
constraints.asym <- minmaxHelper(mat1 = Fi, mat2  = Fj.a)
design_col = brewer.pal(n = 3, name='Set1')
color4Authors <- recode(design, D_Ethurium= design_col[1], D_Facebook=design_col[2], D_Bitcoin = design_col[3]) #prettyGraphsColorSelection(n.colors = nrow(ci.a))
Fj.a
symMap  <- createFactorMapIJ(Fi,Fj,
col.points.i = color4Authors,
col.labels.i = color4Authors)
asymMap  <- createFactorMapIJ(Fi,Fj.a,
col.points.i = color4Authors,
col.labels.i = color4Authors)
legend_fi <- aggregate(Fi, by=list(design), mean)
rownames(legend_fi) <- legend_fi[,1]
legend_fi <- legend_fi[,2:ncol(legend_fi)]
legend  <- createFactorMap(legend_fi,
col.points = design_col,
col.labels = design_col,cex = 6,alpha.points = 0.15, alpha.labels = 0.15,text.cex = 8)
labels4CA <- createxyLabels(resCA = resCA.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points +
symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
#print(map.IJ.sym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
map.IJ.sym <- symMap$baseMap + symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
color4I <- brewer.pal(n = 5, name='Set1')
color4I <- colorRampPalette(color4I)(nrow(ci.a))
# baseMaps ----
ctr.I <- ci.a * sign(Fi[,1])
PTCA4CATA::PrettyBarPlot2(ctr.I[,1],
threshold = 1 / NROW(ctr.I),
font.size = 4,
color4bar = gplots::col2hex(color4I),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.I),
1.2*max(ctr.I) ),
horizontal = FALSE )
# Get some colors ----
#color4Authors <-prettyGraphsColorSelection(n.colors = nrow(ci.a))
color4J <- brewer.pal(n = 5, name='Set1')
color4J <- colorRampPalette(color4J)(nrow(cj.a))
# baseMaps ----
ctr.J <- cj.a * sign(Fj[,1])
PTCA4CATA::PrettyBarPlot2(ctr.J[,1],
threshold = 1 / NROW(ctr.J),
font.size = 4,
color4bar = gplots::col2hex(color4J),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.J),
1.2*max(ctr.J) ),
horizontal = FALSE )
tweets_inf <- epCA.inference.battery(t(tweets), DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf$Inference.Data$ fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 3, name='Set1')
col4J = colorRampPalette(col4J)(nrow(tweets))
laDim = 1
ba001.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios',
ylim = c(30*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(ba001.BR1)
tweets_inf_t <- epCA.inference.battery(tweets, DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf_t$Inference.Data$fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 10, name='Set3')
col4J = colorRampPalette(col4J)(ncol(tweets))
laDim = 1
wedata.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios'
#ylim = c(1.2*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(wedata.BR1)
knitr::opts_chunk$set(fig.width=10, fig.height=6,
echo=TRUE, warning=FALSE, message=FALSE)
library(ExPosition)
library(InPosition)
# use the last version of PTCA
devtools::install_github('HerveAbdi/PTCA4CATA')
library(PTCA4CATA)
library(corrplot)
library(ggplot2)
devtools::install_github('HerveAbdi/data4PCCAR')
library(data4PCCAR)
library(corrplot)
library(RColorBrewer)
library("gplots")
library(tidyverse)
tweets_eth <- readRDS('../../data/tidy_tweets_per_week_log_eth_10.rds')
tweets_facebook <- readRDS('../../data/tidy_tweets_per_week_log_facebook_10.rds')
tweets_bitcoin <- readRDS('../../data/tidy_tweets_per_week_log_bitcoin_10.rds')
tweets_eth <- as.data.frame(tweets_eth) %>% column_to_rownames(var = 'word')
tweets_facebook <- as.data.frame(tweets_facebook) %>% column_to_rownames(var = 'word')
tweets_bitcoin <- as.data.frame(tweets_bitcoin) %>% column_to_rownames(var = 'word')
tweets_eth <- tweets_eth[apply(tweets_eth, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
tweets_facebook <- tweets_facebook[apply(tweets_facebook, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
tweets_bitcoin <- tweets_bitcoin[apply(tweets_bitcoin, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
rownames(tweets_eth) <- paste0(rownames(tweets_eth),'_e')
rownames(tweets_facebook) <- paste0(rownames(tweets_facebook),'_f')
rownames(tweets_bitcoin) <- paste0(rownames(tweets_bitcoin),'_b')
tweets <- rbind(tweets_eth,tweets_facebook, tweets_bitcoin)
tweets
design_eth <- rep('D_Ethurium', nrow(tweets_eth))
design_facebook <- rep('D_Facebook', nrow(tweets_facebook))
design_bitcoin <- rep('D_Bitcoin', nrow(tweets_bitcoin))
design <- c(design_eth, design_facebook, design_bitcoin)
heatmap.2(as.matrix(tweets), col = rev(heat.colors(nrow(tweets_eth))), Rowv = NULL, Colv = NULL, dendrogram = 'none',trace = 'none',margins = c(8, 16)) #brewer.pal(n = 5, name='Set1'))
resCA.sym  <- epCA(tweets, DESIGN = design, make_design_nominal = TRUE, symmetric = TRUE, graphs = FALSE)
# to run a plain CA but asymetric
resCA.asym <- epCA(tweets, DESIGN = design, make_design_nominal = TRUE, symmetric = FALSE, graphs = FALSE)
PTCA4CATA::PlotScree(ev = resCA.sym$ExPosition.Data$eigs,
#p.ev =  we_data_inf$Inference.Data$components$p.vals,
title = 'SCREE Plot',
plotKaiser = TRUE
)
Fj.a <- resCA.asym$ExPosition.Data$fj
cj.a <- resCA.asym$ExPosition.Data$cj
ci.a <- resCA.asym$ExPosition.Data$ci
Fi   <- resCA.sym$ExPosition.Data$fi
Fj   <- resCA.sym$ExPosition.Data$fj
constraints.sym <- minmaxHelper(mat1 = Fi, mat2  = Fj)
constraints.asym <- minmaxHelper(mat1 = Fi, mat2  = Fj.a)
design_col = brewer.pal(n = 3, name='Set1')
color4Authors <- recode(design, D_Ethurium= design_col[1], D_Facebook=design_col[2], D_Bitcoin = design_col[3]) #prettyGraphsColorSelection(n.colors = nrow(ci.a))
Fj.a
symMap  <- createFactorMapIJ(Fi,Fj,
col.points.i = color4Authors,
col.labels.i = color4Authors)
asymMap  <- createFactorMapIJ(Fi,Fj.a,
col.points.i = color4Authors,
col.labels.i = color4Authors)
legend_fi <- aggregate(Fi, by=list(design), mean)
rownames(legend_fi) <- legend_fi[,1]
legend_fi <- legend_fi[,2:ncol(legend_fi)]
legend  <- createFactorMap(legend_fi,
col.points = design_col,
col.labels = design_col,cex = 6,alpha.points = 0.15, alpha.labels = 0.15,text.cex = 8)
labels4CA <- createxyLabels(resCA = resCA.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points +
symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
#print(map.IJ.sym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
map.IJ.sym <- symMap$baseMap + symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
color4I <- brewer.pal(n = 5, name='Set1')
color4I <- colorRampPalette(color4I)(nrow(ci.a))
# baseMaps ----
ctr.I <- ci.a * sign(Fi[,1])
PTCA4CATA::PrettyBarPlot2(ctr.I[,1],
threshold = 1 / NROW(ctr.I),
font.size = 4,
color4bar = gplots::col2hex(color4I),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.I),
1.2*max(ctr.I) ),
horizontal = FALSE )
# Get some colors ----
#color4Authors <-prettyGraphsColorSelection(n.colors = nrow(ci.a))
color4J <- brewer.pal(n = 5, name='Set1')
color4J <- colorRampPalette(color4J)(nrow(cj.a))
# baseMaps ----
ctr.J <- cj.a * sign(Fj[,1])
PTCA4CATA::PrettyBarPlot2(ctr.J[,1],
threshold = 1 / NROW(ctr.J),
font.size = 4,
color4bar = gplots::col2hex(color4J),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.J),
1.2*max(ctr.J) ),
horizontal = FALSE )
tweets_inf <- epCA.inference.battery(t(tweets), DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf$Inference.Data$ fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 3, name='Set1')
col4J = colorRampPalette(col4J)(nrow(tweets))
laDim = 1
ba001.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios',
ylim = c(60*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(ba001.BR1)
tweets_inf_t <- epCA.inference.battery(tweets, DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf_t$Inference.Data$fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 10, name='Set3')
col4J = colorRampPalette(col4J)(ncol(tweets))
laDim = 1
wedata.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios'
#ylim = c(1.2*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(wedata.BR1)
ba001.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios',
ylim = c(20*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(ba001.BR1)
knitr::opts_chunk$set(fig.width=10, fig.height=6,
echo=TRUE, warning=FALSE, message=FALSE)
library(ExPosition)
library(InPosition)
# use the last version of PTCA
devtools::install_github('HerveAbdi/PTCA4CATA')
library(PTCA4CATA)
library(corrplot)
library(ggplot2)
devtools::install_github('HerveAbdi/data4PCCAR')
library(data4PCCAR)
library(corrplot)
library(RColorBrewer)
library("gplots")
library(tidyverse)
col_groups = c('word','9','16','18')
tweets_eth <- readRDS('../../data/tidy_tweets_per_week_log_eth_50.rds')[, col_groups]
tweets_facebook <- readRDS('../../data/tidy_tweets_per_week_log_facebook_50.rds')[,col_groups]
tweets_bitcoin <- readRDS('../../data/tidy_tweets_per_week_log_bitcoin_50.rds')[,col_groups]
tweets_eth <- as.data.frame(tweets_eth) %>% column_to_rownames(var = 'word')
tweets_facebook <- as.data.frame(tweets_facebook) %>% column_to_rownames(var = 'word')
tweets_bitcoin <- as.data.frame(tweets_bitcoin) %>% column_to_rownames(var = 'word')
tweets_eth <- tweets_eth[apply(tweets_eth, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
tweets_facebook <- tweets_facebook[apply(tweets_facebook, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
tweets_bitcoin <- tweets_bitcoin[apply(tweets_bitcoin, 1, function(x) ifelse(all(x==0),FALSE,TRUE)),]
rownames(tweets_eth) <- paste0(rownames(tweets_eth),'_e')
rownames(tweets_facebook) <- paste0(rownames(tweets_facebook),'_f')
rownames(tweets_bitcoin) <- paste0(rownames(tweets_bitcoin),'_b')
tweets <- rbind(tweets_eth,tweets_facebook, tweets_bitcoin)
tweets
design_eth <- rep('D_Ethurium', nrow(tweets_eth))
design_facebook <- rep('D_Facebook', nrow(tweets_facebook))
design_bitcoin <- rep('D_Bitcoin', nrow(tweets_bitcoin))
design <- c(design_eth, design_facebook, design_bitcoin)
heatmap.2(as.matrix(tweets), col = rev(heat.colors(nrow(tweets_eth))), Rowv = NULL, Colv = NULL, dendrogram = 'none',trace = 'none',margins = c(8, 16)) #brewer.pal(n = 5, name='Set1'))
resCA.sym  <- epCA(tweets, DESIGN = design, make_design_nominal = TRUE, symmetric = TRUE, graphs = FALSE)
# to run a plain CA but asymetric
resCA.asym <- epCA(tweets, DESIGN = design, make_design_nominal = TRUE, symmetric = FALSE, graphs = FALSE)
PTCA4CATA::PlotScree(ev = resCA.sym$ExPosition.Data$eigs,
#p.ev =  we_data_inf$Inference.Data$components$p.vals,
title = 'SCREE Plot',
plotKaiser = TRUE
)
Fj.a <- resCA.asym$ExPosition.Data$fj
cj.a <- resCA.asym$ExPosition.Data$cj
ci.a <- resCA.asym$ExPosition.Data$ci
Fi   <- resCA.sym$ExPosition.Data$fi
Fj   <- resCA.sym$ExPosition.Data$fj
constraints.sym <- minmaxHelper(mat1 = Fi, mat2  = Fj)
constraints.asym <- minmaxHelper(mat1 = Fi, mat2  = Fj.a)
design_col = brewer.pal(n = 3, name='Set1')
color4Authors <- recode(design, D_Ethurium= design_col[1], D_Facebook=design_col[2], D_Bitcoin = design_col[3]) #prettyGraphsColorSelection(n.colors = nrow(ci.a))
Fj.a
symMap  <- createFactorMapIJ(Fi,Fj,
col.points.i = color4Authors,
col.labels.i = color4Authors)
asymMap  <- createFactorMapIJ(Fi,Fj.a,
col.points.i = color4Authors,
col.labels.i = color4Authors)
legend_fi <- aggregate(Fi, by=list(design), mean)
rownames(legend_fi) <- legend_fi[,1]
legend_fi <- legend_fi[,2:ncol(legend_fi)]
legend  <- createFactorMap(legend_fi,
col.points = design_col,
col.labels = design_col,cex = 6,alpha.points = 0.15, alpha.labels = 0.15,text.cex = 8)
labels4CA <- createxyLabels(resCA = resCA.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points +
symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
#print(map.IJ.sym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
#### Asymmetric Plot
map.IJ.asym <- asymMap$baseMap + asymMap$I_labels +
asymMap$I_points + asymMap$J_labels +
asymMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.asym)
map.IJ.sym <- symMap$baseMap + symMap$J_labels + symMap$J_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
map.IJ.sym <- symMap$baseMap + symMap$I_labels + symMap$I_points + labels4CA + legend$zeMap_dots + legend$zeMap_text
print(map.IJ.sym)
color4I <- brewer.pal(n = 5, name='Set1')
color4I <- colorRampPalette(color4I)(nrow(ci.a))
# baseMaps ----
ctr.I <- ci.a * sign(Fi[,1])
PTCA4CATA::PrettyBarPlot2(ctr.I[,1],
threshold = 1 / NROW(ctr.I),
font.size = 4,
color4bar = gplots::col2hex(color4I),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.I),
1.2*max(ctr.I) ),
horizontal = FALSE )
# Get some colors ----
#color4Authors <-prettyGraphsColorSelection(n.colors = nrow(ci.a))
color4J <- brewer.pal(n = 5, name='Set1')
color4J <- colorRampPalette(color4J)(nrow(cj.a))
# baseMaps ----
ctr.J <- cj.a * sign(Fj[,1])
PTCA4CATA::PrettyBarPlot2(ctr.J[,1],
threshold = 1 / NROW(ctr.J),
font.size = 4,
color4bar = gplots::col2hex(color4J),
color4ns = 'grey',
main = 'Observations: Contributions (Signed)',
ylab = 'Contributions', ylim = c(1.2*min(ctr.J),
1.2*max(ctr.J) ),
horizontal = FALSE )
tweets_inf <- epCA.inference.battery(t(tweets), DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf$Inference.Data$ fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 3, name='Set1')
col4J = colorRampPalette(col4J)(nrow(tweets))
laDim = 1
ba001.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios',
ylim = c(2*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(ba001.BR1)
tweets_inf_t <- epCA.inference.battery(tweets, DESIGN = design, make_design_nominal = TRUE, graphs = FALSE)
BR <- tweets_inf_t$Inference.Data$fj.boots$tests$boot.ratios
col4J = brewer.pal(n = 10, name='Set3')
col4J = colorRampPalette(col4J)(ncol(tweets))
laDim = 1
wedata.BR1 <- PrettyBarPlot2(BR[,laDim],
threshold = 2,
font.size = 5,
color4bar = gplots::col2hex(col4J), # we need hex code
main = paste0('Bootstrap ratio ',laDim),
ylab = 'Bootstrap ratios'
#ylim = c(1.2*min(BR[,laDim]), 1.2*max(BR[,laDim]))
)
print(wedata.BR1)
